-- NotificationLibrary.lua
local NotificationLibrary = {}

-- Create a ScreenGui to hold the notifications
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Table to store active notifications
local activeNotifications = {}
local notificationHeight = 0.16  -- Set the height for each notification (you can adjust this based on your preference)
local padding = 10  -- Padding for text

-- Function to create a notification with a custom display time
function NotificationLibrary:createNotification(text, displayTime)
    -- Create the notification frame
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.BackgroundColor3 = Color3.fromRGB(255, 182, 193) -- Yuno Gasai/Link pink background (light pink)
    notification.BorderSizePixel = 0
    notification.ZIndex = 5 -- Set ZIndex lower to make sure text stays on top
    notification.Parent = screenGui

    -- Add a corner radius for a soft look
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12) -- More rounded corners
    corner.Parent = notification

    -- Add a shadow effect
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Size = UDim2.new(1, 10, 1, 10)
    shadow.Position = UDim2.new(0, -5, 0, -5)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217" -- Shadow image (you can replace this with your own)
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.Parent = notification

    -- Add text to the notification
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "Text"
    textLabel.BackgroundTransparency = 1
    textLabel.Text = text
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text for contrast
    textLabel.TextSize = 16
    textLabel.Font = Enum.Font.GothamSemibold
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.TextStrokeTransparency = 0.6
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Black stroke for the text
    textLabel.ZIndex = 10
    textLabel.Parent = notification

    -- Add outline to the text
    local textOutline = Instance.new("TextLabel")
    textOutline.Name = "TextOutline"
    textOutline.Size = UDim2.new(1, -20, 1, -20) -- Same as the text size, adjusted for padding
    textOutline.Position = UDim2.new(0, 10, 0, 10)
    textOutline.BackgroundTransparency = 1
    textOutline.Text = text -- Duplicate the text for the outline
    textOutline.TextColor3 = Color3.fromRGB(0, 0, 0) -- Outline color (black)
    textOutline.TextSize = 16
    textOutline.Font = Enum.Font.GothamSemibold
    textOutline.TextXAlignment = Enum.TextXAlignment.Left
    textOutline.TextYAlignment = Enum.TextYAlignment.Center
    textOutline.ZIndex = 9
    textOutline.TextStrokeTransparency = 0.6
    textOutline.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Black outline
    textOutline.Parent = notification

    -- Adjust the size of the notification based on text bounds
    textLabel.Text = text  -- Set the text to make sure TextBounds is updated
    local textWidth = textLabel.TextBounds.X + padding * 2 -- Add padding to width
    local textHeight = textLabel.TextBounds.Y + padding * 2 -- Add padding to height

    -- Make the Y size 20% smaller
    textHeight = textHeight * 0.8

    -- Resize the notification size to fit the text
    notification.Size = UDim2.new(0, textWidth, 0, textHeight)

    -- Adjust the position of the text inside the notification
    textLabel.Size = UDim2.new(1, -padding * 2, 1, -padding * 2)
    textLabel.Position = UDim2.new(0, padding, 0, padding)

    -- Use TweenService to animate the notification
    local tweenService = game:GetService("TweenService")

    -- Define the tween animation
    local tweenInfo = TweenInfo.new(
        0.5, -- Duration
        Enum.EasingStyle.Quint, -- Easing style
        Enum.EasingDirection.Out -- Easing direction
    )

    -- Calculate the starting position based on existing notifications
    local positionOffset = 0.12 + (#activeNotifications * notificationHeight)
    local newPosition = UDim2.new(0.02, 0, positionOffset, 0)

    -- Slide in from the top-left and move further down (adjusted position)
    local tweenIn = tweenService:Create(
        notification,
        tweenInfo,
        { Position = newPosition } -- Move a bit further down
    )

    -- Add the new notification to the activeNotifications table
    table.insert(activeNotifications, notification)

    -- Play the tween animation
    tweenIn:Play()

    -- Optional: Remove the notification after a custom display time
    delay(displayTime, function() -- Use custom display time
        -- Slide out to the top-left
        local tweenOut = tweenService:Create(
            notification,
            tweenInfo,
            { Position = UDim2.new(-0.2, 0, -0.2, 0) } -- Move back off-screen to the top-left
        )
        tweenOut:Play()

        -- Wait for the animation to finish
        wait(0.5)

        -- Remove the notification from the activeNotifications table
        for i, notif in ipairs(activeNotifications) do
            if notif == notification then
                table.remove(activeNotifications, i)
                break
            end
        end

        -- Move up all notifications below the removed one
        for i, notif in ipairs(activeNotifications) do
            local newPosition = UDim2.new(0.02, 0, 0.12 + ((i - 1) * notificationHeight), 0) -- Adjust Y position based on index
            tweenService:Create(notif, tweenInfo, { Position = newPosition }):Play()
        end

        -- Destroy the notification
        notification:Destroy()
    end)
end

-- Detect player joining or leaving
game.Players.PlayerAdded:Connect(function(player)
    NotificationLibrary:createNotification(player.Name .. " joined!", 3)  -- Show notification for 3 seconds
end)

game.Players.PlayerRemoving:Connect(function(player)
    NotificationLibrary:createNotification(player.Name .. " left!", 3)  -- Show notification for 3 seconds
end)

-- Return the NotificationLibrary table for use in other scripts
return NotificationLibrary
